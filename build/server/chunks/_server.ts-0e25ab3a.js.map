{"version":3,"file":"_server.ts-0e25ab3a.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/auth/_username_/verify-authentication/_server.ts.js"],"sourcesContent":["import { j as json } from \"../../../../../../chunks/index.js\";\nimport { p as prisma } from \"../../../../../../chunks/prisma.js\";\nimport { verifyAuthenticationResponse } from \"@simplewebauthn/server\";\nimport { O as ORIGIN, R as RPID } from \"../../../../../../chunks/private.js\";\nconst POST = async ({ params, request, cookies }) => {\n  const user_name = params.username;\n  const body = await request.json();\n  if (!user_name) {\n    return new Response(JSON.stringify({ error: \"Invalid Request\" }), { status: 400 });\n  }\n  const user = await prisma.user.findFirst({\n    where: {\n      username: user_name\n    }\n  });\n  if (!user) {\n    return new Response(JSON.stringify({ error: \"Invalid user\" }), { status: 400 });\n  }\n  const expectedChallenge = user.currentChallenge;\n  if (!expectedChallenge) {\n    return new Response(JSON.stringify({ error: \"Invalid challenge\" }), { status: 400 });\n  }\n  const authenticator = await prisma.authenticator.findFirst({\n    where: {\n      userID: user.id,\n      credentialID: Buffer.from(body.id, \"base64\")\n    }\n  });\n  if (!authenticator) {\n    return new Response(JSON.stringify({ error: \"Invalid authenticator\" }), { status: 400 });\n  }\n  let verification;\n  try {\n    verification = await verifyAuthenticationResponse({\n      response: body,\n      expectedChallenge,\n      expectedOrigin: ORIGIN,\n      expectedRPID: RPID,\n      authenticator: {\n        credentialPublicKey: authenticator.credentialPublicKey,\n        credentialID: authenticator.credentialPublicKey,\n        counter: authenticator.counter\n      }\n    });\n  } catch (error) {\n    console.error(error);\n    return new Response(JSON.stringify({ error: error.toString() }), { status: 400 });\n  }\n  if (verification.authenticationInfo && verification.verified) {\n    const session_id = await prisma.session.create({\n      data: {\n        user: {\n          connect: {\n            id: user.id\n          }\n        },\n        expiresAt: new Date((/* @__PURE__ */ new Date()).getTime() + 1e3 * 60 * 60 * 24 * 30)\n        // 30 days\n      }\n    });\n    cookies.set(\"session_id\", session_id.id, {\n      path: \"/\",\n      maxAge: 60 * 60 * 24 * 30,\n      // 30 days\n      httpOnly: true,\n      sameSite: \"strict\"\n    });\n    await prisma.authenticator.update({\n      where: {\n        credentialID: authenticator.credentialID\n      },\n      data: {\n        counter: verification.authenticationInfo.newCounter\n      }\n    });\n  }\n  return json(verification);\n};\nexport {\n  POST\n};\n"],"names":[],"mappings":"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"}